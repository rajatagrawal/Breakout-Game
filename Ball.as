package  {		import flash.display.MovieClip;	import flash.events.Event;	import flash.net.URLRequest;	import flash.media.Sound;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.media.SoundChannel;		public class Ball extends MovieClip {				public var horizontalDirection:Number;		public var verticalDirection:Number;		public var ballSpeed:Number;		public var testObjects:Array;		public var centreOfBall:Number;		public var originalBallSpeed:Number;		public var ballAngle:Number;		public var changeValueBallSpeed:Number;		public var screenTop:Number;		public var screenBottom:Number;		public var screenRight:Number;		public var screenLeft:Number;		var soundBallHittingSlider:Sound;		var soundBallHittingBrick:Sound;		var loseLifeSound:Sound;		var loseLifeSoundChannel:SoundChannel;		public var score:Number;		public var blueBrickScore:Number;		public var greenBrickScore:Number;		public var yellowBrickScore:Number;		public var redBrickScore:Number;		public var specialBrickScore:Number;		public var collisionInformation:CollisionInformation;		public var collisionGoingOn:Boolean;		public var collisionSide:String;		public var isBallMoving:Boolean;		public var gamePlay:GamePlay;		public var originalPositionX:Number;		public var originalPositionY:Number;		public var centreOfBallX:Number;		public var centreOfBallY:Number;		public var maximumBallSpeed:Number;				public function Ball(left:Number,right:Number,top:Number,bottom:Number, getGamePlay:GamePlay)		{			// constructor code			screenTop = top;			screenBottom = bottom;			screenRight = right;			screenLeft = left;			ballSpeed = 1;			originalBallSpeed = ballSpeed;			changeValueBallSpeed = 0.5;			score = 0;			blueBrickScore = 0;			redBrickScore = 0;			greenBrickScore = 0;			yellowBrickScore = 0;			specialBrickScore = 0;			collisionGoingOn = false;			collisionSide = "none";			collisionInformation = new CollisionInformation(score,null);			isBallMoving = false;			gamePlay = getGamePlay;			originalPositionX = 400;			originalPositionY = 240;			maximumBallSpeed = ballSpeed + changeValueBallSpeed;			loadSounds();								}				public function loadSounds()		{			var soundURL:URLRequest = new URLRequest();						soundBallHittingSlider= new Sound();			soundURL.url = "Audio/collisionWithSlider.mp3";			soundBallHittingSlider.load(soundURL);						soundBallHittingBrick = new Sound();			soundURL.url = "Audio/collisionWithBrick.mp3";			soundBallHittingBrick.load(soundURL);						loseLifeSound = new Sound();			soundURL.url = "Audio/loseLife.mp3";			loseLifeSound.load(soundURL);						loseLifeSoundChannel = new SoundChannel();		}		public function chooseOriginalBallDirection():Number		{			var directionArray:Array = new Array();			directionArray.push(135);			directionArray.push(-135);						return directionArray[(Math.floor(Math.random() * 2))]		}		public function passScreenObjects(passedTestObjects:Array)		{			testObjects = new Array();			testObjects = passedTestObjects;		}		public function changeBallSpeed(newBallSpeed:Number)		{			ballSpeed = newBallSpeed			originalBallSpeed = ballSpeed;			maximumBallSpeed = ballSpeed + changeValueBallSpeed;		}				public function stopMotion()		{			isBallMoving = false;			this.removeEventListener(Event.ENTER_FRAME, moveBall)		}				public function moveBallWithSlider()		{			this.x = (gamePlay.slider.x + gamePlay.slider.x + gamePlay.slider.width)/2;			this.y = gamePlay.slider.y - this.height;					}		public function setBallToOriginalPosition()		{			this.x = originalPositionX;			this.y = originalPositionY;			 		}		public function moveBallAtAngle(angle:Number)		{			if (angle == 0)			{				this.removeEventListener(Event.ENTER_FRAME, moveBall);				isBallMoving = false;				return;							}						if (angle == 45)			{				this.x = this.x + ballSpeed;				this.y = this.y - ballSpeed;			}						else if (angle == -45)			{				this.x = this.x - ballSpeed;				this.y = this.y - ballSpeed;			}						else if (angle == 60)			{				this.x = this.x + (2 * ballSpeed);				this.y = this.y - ballSpeed;			}						else if (angle == -60)			{				this.x = this.x - (2 * ballSpeed);				this.y = this.y - ballSpeed;			}						else if (angle == 135)			{				this.x = this.x + ballSpeed;				this.y = this.y + ballSpeed;			}			else if (angle == 150)			{				this.x = this.x + ballSpeed;				this.y = this.y + (2 * ballSpeed);			}			else if (angle == -135)			{				this.x = this.x - ballSpeed;				this.y = this.y + ballSpeed;			}						else if (angle == -150)			{				this.x = this.x - ballSpeed;				this.y = this.y + (2 * ballSpeed);			}						else if (angle == -90)				this.x = this.x - ballSpeed;						else if (angle == 90)				this.x = this.x + ballSpeed;						else if (angle == 180)				this.y = this.y + ballSpeed;						else if (ballAngle == 1)				this.y = this.y - ballSpeed;		}		public function checkCollisionWithSlider(slider:BallSlider)		{			if ((this.y + this.height)<= (slider.y + slider.height))			{				if ((this.x + this.width) >= slider.x)				{					if (this.x <= (slider.x + slider.width))					{						if ((this.y + this.height) >= slider.y)						{							soundBallHittingSlider.play();							centreOfBall = (this.x + this.width + this.x)/2;							if (centreOfBall>=slider.x && centreOfBall <= (slider.x + slider.width/4))							{								if (ballSpeed < maximumBallSpeed)								{									ballSpeed = ballSpeed + changeValueBallSpeed;								}								if (ballAngle==135 || ballAngle == 150)									ballAngle = -60;																else if (ballAngle == -135 || ballAngle == -150)									ballAngle = -60;																}														else if (centreOfBall>=((3/4 * slider.width) + slider.x) && centreOfBall <= (slider.x + slider.width))							{								if (ballSpeed < maximumBallSpeed)								{									ballSpeed = ballSpeed + changeValueBallSpeed;								}								if (ballAngle == 135 || ballAngle == 150)									ballAngle = 60;																else if (ballAngle == -135 || ballAngle == -150)									ballAngle = 60;							}														else							{								if (ballSpeed>originalBallSpeed)								{									ballSpeed = ballSpeed - changeValueBallSpeed;								}																	if (ballAngle == -135 || ballAngle == -150)										ballAngle = -45;																		else if (ballAngle == 135 || ballAngle == 150)									ballAngle = 45;															}						}												else							return;					}				}			}					}				public function updateScore(brickColor:String)		{			if (brickColor == 'blue')				score = score + blueBrickScore;							else if (brickColor == 'red')				score = score + redBrickScore;						else if (brickColor == 'green')				score = score + greenBrickScore;						else if (brickColor == 'yellow')				score = score + yellowBrickScore;						else if (brickColor == 'special')				score = score + specialBrickScore;		}				public function setBrickScores(blue:Number,red:Number,green:Number,yellow:Number,special:Number)		{			blueBrickScore = blue;			redBrickScore = red;			greenBrickScore = green;			specialBrickScore = special;			yellowBrickScore = yellow;		}		public function getScore():Number		{			return score;		}				public function clearCollisionFlag(brick:Brick)		{			if (collisionSide == "none")				return;							else if (collisionSide == "bottom")			{				if (this.hitTestObject(brick) == false)				{					collisionGoingOn = false;					collisionSide = "none";				}			}						else if (collisionSide == "top")			{				if (this.hitTestObject(brick) == false)				{					collisionGoingOn = false;					collisionSide = "none";				}			}						else if (collisionSide == "left")			{								if (this.hitTestObject(brick) == false)				{					collisionGoingOn = false;					collisionSide = "none";				}			}						else if (collisionSide == "right")			{				if (this.hitTestObject(brick) == false)				{					collisionGoingOn = false;					collisionSide = "none";				}			}					}		public function checkBrickCollisionBottomSide(brick:Brick,index:int)		{			if (collisionGoingOn == false)			{				collisionGoingOn = true;				soundBallHittingBrick.play();				collisionSide = "bottom";				updateScore(brick.brickColor);				collisionInformation.setParameters(score,brick);				gamePlay.updateScore(collisionInformation);				//brick.destroyed();				testObjects.splice(index,1);				if (ballAngle == 45)					ballAngle = 135;				else if (ballAngle == 60)					ballAngle = 150;				else if (ballAngle == -45)					ballAngle = -135;				else if (ballAngle == -60)					ballAngle = -150;				else if (ballAngle == 1)					ballAngle = 180;				//clearCollisionFlag(brick,"bottom");			}		}				public function checkBrickCollisionTopSide(brick:Brick,index:int)		{						// check if it hits the top of the brick			if (collisionGoingOn == false)			{				collisionGoingOn = true;				soundBallHittingBrick.play();				collisionSide = "top";				//brick.destroyed();				updateScore(brick.brickColor);				collisionInformation.setParameters(score,brick);				gamePlay.updateScore(collisionInformation);				testObjects.splice(index,1);								if (ballAngle == -135)					ballAngle = -45;				else if (ballAngle == -150)					ballAngle = -60;				else if (ballAngle == 135)					ballAngle = 45;				else if (ballAngle == 150)					ballAngle = 60;				else if (ballAngle == 180)					ballAngle = 1;							}		}				public function checkBrickCollisionLeftSide(brick:Brick, index:int)		{			// check if the ball hits the left side of the brick			if (collisionGoingOn == false)			{				collisionGoingOn = true;				soundBallHittingBrick.play();				collisionSide = "left";				//brick.destroyed();				updateScore(brick.brickColor);				collisionInformation.setParameters(score,brick);				gamePlay.updateScore(collisionInformation);				testObjects.splice(index,1);								if (ballAngle == 135)					ballAngle = -135;				else if (ballAngle == 150)					ballAngle = -150;				else if (ballAngle == 45)					ballAngle = -45;				else if (ballAngle == 60)					ballAngle = -60;				else if (ballAngle == 90)					ballAngle = -90;			}		}		public function checkBrickCollisionRightSide(brick:Brick,index:int)		{			// check if it hits the right of the brick			if (collisionGoingOn == false)			{				soundBallHittingBrick.play();				collisionGoingOn = true;				collisionSide = "right";				//brick.destroyed();				updateScore(brick.brickColor);				collisionInformation.setParameters(score,brick);				gamePlay.updateScore(collisionInformation);				testObjects.splice(index,1);								if (ballAngle == -45)					ballAngle = 45;				else if (ballAngle == -60)					ballAngle = 60;				else if (ballAngle == -135)					ballAngle = 135;				else if (ballAngle == -150)					ballAngle = 150;				else if (ballAngle == -90)					ballAngle = 90;			}		}		public function checkCollisionWithBrick(brick:Brick,index:int)		{			if (this.hitTestObject(brick))			{				//check which side of the brick is the centre of the ball;				centreOfBallX = (this.x + this.x + this.width)/2;				centreOfBallY = (this.y + this.y + this.height)/2;								// check if the ball is in the first quadrant of overlapping collisions				if (centreOfBallX >= (brick.x + brick.width))				{					if (centreOfBallY <= (brick.y))					{						if ((centreOfBallX - (brick.x + brick.width)) < ((brick.y) - centreOfBallY))						{							checkBrickCollisionRightSide(brick,index);						}						else						{							checkBrickCollisionTopSide(brick,index);						}					}				}								// check if the ball is in the second quadrant of overlapping collisions				if (centreOfBallX <= brick.x)				{					if (centreOfBallY <= (brick.y))					{						if ((brick.x - centreOfBallX) < ((brick.y) - centreOfBallY))						{							checkBrickCollisionLeftSide(brick,index);						}						else						{							checkBrickCollisionTopSide(brick,index);						}					}				}								// check if the ball is in the third quadrant of overlapping collisions				if (centreOfBallX <= brick.x)				{					if (centreOfBallY >= (brick.y + brick.height))					{						if ((brick.x - centreOfBallX) < (centreOfBallY - (brick.y + brick.height)))						{							checkBrickCollisionLeftSide(brick,index);						}						else						{							checkBrickCollisionBottomSide(brick,index);						}					}				}								// check if the ball is in the fourth quadrant of overlapping collisions				if (centreOfBallY >= (brick.y + brick.height))				{					if (centreOfBallX >= (brick.x + brick.width))					{						if ((centreOfBallY - (brick.y + brick.height)) < (centreOfBallX - (brick.x + brick.width)))						{							checkBrickCollisionBottomSide(brick,index);						}						else						{							checkBrickCollisionRightSide(brick,index);						}					}				}				// check if the ball is in the right side of the brick				if (centreOfBallX >= (brick.x + brick.width))				{					checkBrickCollisionRightSide(brick,index);				}								else if (centreOfBallY <= (brick.y))				{					checkBrickCollisionTopSide(brick,index);				}				else if (centreOfBallX <= brick.x)				{					checkBrickCollisionLeftSide(brick,index);				}				else if (centreOfBallY >= (brick.y + brick.height))				{					checkBrickCollisionBottomSide(brick,index);				}							}			if (collisionGoingOn == true)				clearCollisionFlag(brick);						}				public function checkCollisionWithScreenTop()		{			if ((this.x>=screenLeft) && ((this.x + this.width) <= screenRight))			{				if (this.y <= screenTop)				{					if (ballAngle == 45)						ballAngle = 135;					else if (ballAngle == 60)						ballAngle = 150;					else if (ballAngle == -45)						ballAngle = -135;					else if (ballAngle == -60)						ballAngle = -150;				}			}		}		public function checkCollisionWithScreenLeft()		{			if ((this.y >= screenTop) && (this.y + this.height <= screenBottom))			{				if (this.x <= screenLeft)				{					if (ballAngle == -45)						ballAngle = 45;					else if (ballAngle == -60)						ballAngle = 60;					else if (ballAngle == -135)						ballAngle = 135;					else if (ballAngle == -150)						ballAngle = 150;										}			}		}				public function checkCollisionWithScreenRight()		{			if ((this.y >= screenTop) && ((this.y + this.height) <= screenBottom))			{				if ((this.x + this.width) >= screenRight)				{					if (ballAngle == 45)						ballAngle = -45;					else if (ballAngle == 60)						ballAngle = -60;					else if (ballAngle == 135)						ballAngle = -135;					else if (ballAngle == 150)						ballAngle = -150;				}			}		}				public function checkCollisionWithScreenBottom()		{			if ((this.x >= screenLeft) && ((this.x + this.width) <= screenRight))			{				if ((this.y + this.height) >= screenBottom)				{					pauseBallMotion();					loseLifeSoundChannel = loseLifeSound.play();					loseLifeSoundChannel.addEventListener(Event.SOUND_COMPLETE,resumeBallMotion);									}			}		}		public function pauseGame()		{			stopMotion();			gamePlay.slider.stopMotion();			this.removeEventListener(Event.ENTER_FRAME, enableKeyboardControl);					}		public function pauseBallMotion()		{			ballAngle = 0;			stopMotion();			gamePlay.slider.stopMotion();			this.removeEventListener(Event.ENTER_FRAME, enableKeyboardControl);		}		public function resumeBallMotion(event:Event)		{			gamePlay.slider.decreaseWidth();			gamePlay.slider.startMotion();			this.addEventListener(Event.ENTER_FRAME, enableKeyboardControl);		}		public function resumeBallMotionAfterQuestion()		{			gamePlay.slider.startMotion();			changeBallSpeed(originalBallSpeed);			this.addEventListener(Event.ENTER_FRAME, enableKeyboardControl);		}		public function checkCollisionWithScreen()		{			checkCollisionWithScreenTop();			checkCollisionWithScreenBottom();			checkCollisionWithScreenRight();			checkCollisionWithScreenLeft();					}		public function checkCollision()		{			// testObjects is an array of movie clips on the stage that			//needs to be checked for collision						checkCollisionWithScreen();						var objectType:String = new String("");						for (var counter =0 ; counter < testObjects.length; counter++)			{				objectType = testObjects[counter].typeOfObject;								if (objectType == "slider")				{					checkCollisionWithSlider(testObjects[counter]);									}								else if (objectType == "brick")				{					checkCollisionWithBrick(testObjects[counter],counter);									}							}		}		public function setupBall()		{			this.addEventListener(Event.ENTER_FRAME, enableKeyboardControl);		}		public function enableKeyboardControl(event:Event)		{			if (isBallMoving == false)			{				setBallToOriginalPosition();			}			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyboardControlFunction);		}		public function keyboardControlFunction(event:KeyboardEvent)		{			if (event.keyCode == Keyboard.RIGHT || event.keyCode == Keyboard.LEFT)			{				if (isBallMoving == false)				{					isBallMoving = true;					//ballAngle = chooseOriginalBallDirection();					if (event.keyCode == Keyboard.RIGHT)						ballAngle = 135;					else if (event.keyCode == Keyboard.LEFT)						ballAngle = -135;					this.addEventListener(Event.ENTER_FRAME, moveBall );				}			}		}						public function moveBall(event:Event)		{						stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyboardControlFunction);			// check if the the ball hits any of the 4 edges of the screen						checkCollision();			moveBallAtAngle(ballAngle);					// end of function moveBall			}	}	}