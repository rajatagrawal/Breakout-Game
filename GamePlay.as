package  {	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.net.URLRequest;	import flash.display.Loader;	import flash.events.Event;	import fl.controls.ProgressBar;		public class GamePlay extends MovieClip{				public var score:Number;		public var ball:Ball;		public var slider:BallSlider;		public var screenObjects:Array;		public var brickArray:Array;		public var scoreTextField:TextField;		public var scoreTextFieldStyle:TextFormat;		public var stageBackgroundURL:URLRequest;		public var gameCurriculum:Curriculum;		public var collisionInformation:CollisionInformation;				public var splashScreenURL:URLRequest;				public var gameImagesLoader:ImageLoader;		public var noOfSpecialBricks:int;		public var maximumNoOfSpecialBricks:int;		public function GamePlay() 		{			// constructor code			score = 0;			collisionInformation = new CollisionInformation(score,null);			gameImagesLoader = new ImageLoader(this);			maximumNoOfSpecialBricks = 5;			addChild(gameImagesLoader);											}		public function loadImages()		{			gameImagesLoader.setupProgressBar(325,400);			gameImagesLoader.loadImages();		}		public function enterSplashScreenURL(url:String)		{			splashScreenURL = new URLRequest(url);		}		public function enterBackgroundURL(url:String)		{			stageBackgroundURL = new URLRequest(url);					}		public function setupGameCurriculumImagesURL()		{			gameCurriculum = new Curriculum(gameImagesLoader,this);			addChild(gameCurriculum);			gameCurriculum.setupImagesURL();					}		public function setupBall(left:Number,right:Number,top:Number,bottom:Number)		{			ball = new Ball(left,right,top,bottom,this);			ball.setupBall();			ball.changeBallSpeed(3.5);			this.addChild(ball);					}						public function setupSlider(getX:Number, getY:Number, getScreenSizeRight:Number, getScreenSizeLeft:Number, getAcceleration:Number, getFriction:Number) 		{			slider = new BallSlider(getX,getY,getScreenSizeRight,getScreenSizeLeft,getAcceleration,getFriction);			addChild(slider);					}						public function fadeScreen()		{			gameImagesLoader.stageBackground.alpha = 0.5;						ball.alpha = 0.5;			slider.alpha = 0.5;						for (var counter=0;counter<brickArray.length;counter++)			{				if (brickArray[counter].isDestroyed == false)					brickArray[counter].alpha = 0.5;			}						for (counter=0; counter<brickArray.length; counter= counter + 1)			{				if (brickArray[counter].brickColor == "special")				{					brickArray[counter].specialBrick.stop();				}			}		}						public function unfadeScreen()		{			gameImagesLoader.stageBackground.alpha = 1;			ball.alpha = 1;			slider.alpha = 1;						for (var counter=0;counter<brickArray.length;counter++)			{				if (brickArray[counter].isDestroyed == false)					brickArray[counter].alpha = 1;			}						for (counter=0; counter<brickArray.length; counter= counter + 1)			{				if (brickArray[counter].brickColor == "special")				{					if (brickArray[counter].isDestroyed == false)						brickArray[counter].specialBrick.play();				}			}		}				public function createScorecard()		{			scoreTextField = new TextField();			scoreTextField.text = "Score: " + score;			scoreTextField.x = 20;			scoreTextField.y = 18;			scoreTextField.autoSize = TextFieldAutoSize.LEFT;			this.addChild(scoreTextField);									scoreTextFieldStyle = new TextFormat();			scoreTextFieldStyle.color = 0xFF0000;			scoreTextFieldStyle.bold = true;			scoreTextFieldStyle.size = 20;									scoreTextField.setTextFormat(scoreTextFieldStyle);					}				public function updateScore(getCollisionInformation:CollisionInformation)		{			collisionInformation.setParameters(getCollisionInformation.score,getCollisionInformation.brick);			scoreTextField.text = "SCORE: " + collisionInformation.score;			scoreTextField.setTextFormat(scoreTextFieldStyle);			if (collisionInformation.brick.brickColor == "special")			{				ball.pauseBallMotion();				collisionInformation.brick.isDestroyed = true;				collisionInformation.brick.blink(5);				//startQuestion();								//trace("nothing");			}			else 			{				collisionInformation.brick.destroyed();			}					}				public function startQuestion()		{			//ball.stopMotion();			//slider.stopMotion();			fadeScreen();						gameCurriculum.showFourImages(200,250,200,200);			gameCurriculum.startAnswerSelectorMotion()					}				public function questionFinished()		{			unfadeScreen();			gameCurriculum.hideFourImages();			ball.resumeBallMotionAfterQuestion();		}		public function createLevel(levelNo:int)		{			brickArray = new Array();			if (levelNo ==1)			{				var startingY:Number = 56;				var brickSpace:Number = 3;				var noOfRows = 5;				var noOfColumns = 13;				var brickWidth = 55;				var brickHeight = 22;				var startingX = 24;				noOfSpecialBricks = 0;				for (var rowCounter = 0; rowCounter< noOfRows; rowCounter = rowCounter + 1)				{					for (var columnCounter = 0; columnCounter<noOfColumns; columnCounter++)											brickArray.push(new Brick((startingX + (columnCounter*(brickWidth + brickSpace))),startingY + ((brickHeight + brickSpace) * rowCounter),this,"random"));				}			}					}				public function setupGame()		{			screenObjects = new Array();			screenObjects.push(slider);			for (var counter = 0; counter < brickArray.length; counter ++)				screenObjects.push(brickArray[counter])							ball.passScreenObjects(screenObjects)		}						public function setBrickScores(blue:Number,red:Number,green:Number,yellow:Number,special:Number)		{			ball.setBrickScores(blue,red,green,yellow,special);		}		public function startGame()		{			slider.startMotion();			//ball.startMotion(slider.x,slider.y);					}	}	}