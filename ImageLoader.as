package  {	import flash.display.MovieClip;	import flash.events.Event;	import fl.controls.ProgressBar;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.events.KeyboardEvent;		public class ImageLoader extends MovieClip{				public var progressBar:ProgressBar;		public var splashScreen:Loader;		public var gamePlay:GamePlay;		public var stageBackground:Loader;		public var brickImages:Array;		public var brickImageCounter:int;		public var loadingText:TextField;		public var loadingTextStyle:TextFormat;		public var introMusic:Sound;		public var introMusicSoundChannel:SoundChannel;		public var startGame:TextField;		public var startGameStyle:TextFormat;		public var curriculumImages:Array;		public var curriculumImageCounter:int;		public var answerSelector:Loader;		public var loadingAnimationVariable:loadingAnimation;						public function ImageLoader(getGamePlay:GamePlay) {			// constructor code			gamePlay = getGamePlay;			brickImageCounter = 0;			brickImages = new Array();			curriculumImages = new Array();			curriculumImageCounter = 0;		}		public function setupStartGameTextField()		{			startGame = new TextField();			startGame.text = "PRESS ANY KEY TO CONTINUE";			//startGame.x = 250;			startGame.y = 50;			startGame.autoSize = TextFieldAutoSize.LEFT;			startGame.x = 400 - (startGame.width/2) - 35;						startGameStyle = new TextFormat();			startGameStyle.bold = true;			startGameStyle.size = 18;			startGameStyle.color = 0x00FF00;						startGame.setTextFormat(startGameStyle);			addChild(startGame);					}		public function setupProgressBar(getX:Number, getY:Number)		{			progressBar = new ProgressBar();			progressBar.x = getX;			progressBar.y = getY;			addChild(progressBar);						loadingText = new TextField();			loadingText.text = "";			loadingText.x = progressBar.x;			loadingText.y = progressBar.y - 30;			loadingText.autoSize = TextFieldAutoSize.LEFT;						loadingTextStyle = new TextFormat();			loadingTextStyle.bold = true;			loadingTextStyle.color = 0xFFCC66;			loadingTextStyle.size = 16;						loadingText.setTextFormat(loadingTextStyle);			addChild(loadingText);		}				public function setupLoadingAnimation()		{			loadingAnimationVariable = new loadingAnimation();			addChild(loadingAnimationVariable);			loadingAnimationVariable.x = 325;			loadingAnimationVariable.y = 375;		}		public function loadImages()		{			setupLoadingAnimation();						splashScreen = new Loader();			progressBar.source = splashScreen.contentLoaderInfo;			splashScreen.load(new URLRequest("Images/splashScreen.jpg"));			splashScreen.contentLoaderInfo.addEventListener(Event.COMPLETE, loadIntroMusic);		}		public function loadBackground()		{						stageBackground = new Loader();						progressBar.source = stageBackground.contentLoaderInfo;			stageBackground.load(gamePlay.stageBackgroundURL);			stageBackground.contentLoaderInfo.addEventListener(Event.COMPLETE, allImagesLoaded);					}				public function loadCurriculumImages(event:Event)		{			progressBar.removeEventListener(Event.COMPLETE, loadCurriculumImages);			if (curriculumImageCounter < gamePlay.gameCurriculum.imageURL.length)			{				curriculumImages.push(new Loader());				progressBar.source = curriculumImages[curriculumImageCounter].contentLoaderInfo ;				progressBar.addEventListener(Event.COMPLETE, loadNextCurriculumImage);				curriculumImages[curriculumImageCounter].load(gamePlay.gameCurriculum.imageURL[curriculumImageCounter]);							}			else				loadBrickImages(null);					}		public function loadNextCurriculumImage(event:Event)		{			progressBar.removeEventListener(Event.COMPLETE, loadNextCurriculumImage);			curriculumImageCounter = curriculumImageCounter + 1;			loadCurriculumImages(null);					}		public function loadIntroMusic(event:Event)		{			addChild(splashScreen);			removeChild(progressBar);			removeChild(loadingText);			removeChild(loadingAnimationVariable);			addChild(loadingAnimationVariable);			addChild(progressBar);			addChild(loadingText);			introMusic = new Sound();			introMusic.load(new URLRequest("Audio/intro.mp3"));			introMusic.addEventListener(Event.COMPLETE,playIntroMusic);		}		public function playIntroMusic(event:Event)		{			introMusicSoundChannel = new SoundChannel();			introMusicSoundChannel = introMusic.play();			introMusicSoundChannel.addEventListener(Event.SOUND_COMPLETE,repeatIntroMusic);			loadAnswerSelector();		}		public function loadAnswerSelector()		{			answerSelector = new Loader();			progressBar.source = answerSelector.contentLoaderInfo ;			progressBar.addEventListener(Event.COMPLETE, loadCurriculumImages);			answerSelector.load(new URLRequest("Images/answer_selector.jpg"));		}		public function repeatIntroMusic(event:Event)		{			introMusicSoundChannel = introMusic.play();			introMusicSoundChannel.addEventListener(Event.SOUND_COMPLETE, repeatIntroMusic);		}		public function loadBrickImages(event:Event)		{			brickImages.push(new Loader());			progressBar.source = brickImages[brickImageCounter].contentLoaderInfo;			if (gamePlay.brickArray[brickImageCounter].imageRequest.url != "donotLoadImage")			{				progressBar.addEventListener(Event.COMPLETE,loadNextBrickImage);				brickImages[brickImageCounter].load(gamePlay.brickArray[brickImageCounter].imageRequest)			}			else			{				brickImageCounter = brickImageCounter + 1;				loadBrickImages(null);			}					}		public function loadNextBrickImage(event:Event)		{			progressBar.removeEventListener(Event.COMPLETE,loadNextBrickImage);						if (brickImageCounter == (gamePlay.brickArray.length - 1))			{				loadBackground();				return;							}			brickImageCounter = brickImageCounter + 1;			loadBrickImages(null);		}						public function startKeyboardInteraction()		{			this.addEventListener(Event.ENTER_FRAME,activateKeyboardInteraction);		}		public function activateKeyboardInteraction(event:Event)		{			stage.addEventListener(KeyboardEvent.KEY_DOWN,keyboardListener);			this.removeEventListener(Event.ENTER_FRAME,activateKeyboardInteraction);		}		public function keyboardListener(event:KeyboardEvent)		{			stage.removeEventListener(KeyboardEvent.KEY_DOWN,keyboardListener);			removeChild(progressBar);			removeChild(loadingText);			removeChild(startGame);			introMusicSoundChannel.stop();			introMusicSoundChannel.removeEventListener(Event.SOUND_COMPLETE, repeatIntroMusic);			addChild(stageBackground);						addChild(answerSelector);			answerSelector.alpha = 0.5;			answerSelector.visible = false;			for(brickImageCounter = 0 ; brickImageCounter<gamePlay.brickArray.length; brickImageCounter = brickImageCounter + 1)			{					gamePlay.brickArray[brickImageCounter].addChild(brickImages[brickImageCounter]);					addChild(gamePlay.brickArray[brickImageCounter]);			}						for (curriculumImageCounter = 0; curriculumImageCounter < gamePlay.gameCurriculum.imageURL.length; curriculumImageCounter = curriculumImageCounter + 1)			{				addChild(curriculumImages[curriculumImageCounter]);				curriculumImages[curriculumImageCounter].visible = false;			}			gamePlay.setupBall(15,785,15,465);			gamePlay.setupSlider(400,440,785,15,1.3,1);			gamePlay.setupGame();			gamePlay.createScorecard();			gamePlay.setBrickScores(40,10,20,30,100);			gamePlay.startGame();		}		public function allImagesLoaded(event:Event)		{						startKeyboardInteraction();			loadingText.text = "LOAD COMPLETE"			loadingAnimationVariable.stop();			loadingAnimationVariable.visible = false;			loadingText.setTextFormat(loadingTextStyle);			setupStartGameTextField();					}	}	}